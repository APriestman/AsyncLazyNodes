/*
 * AsyncLazyNodes Prototype
 * Copyright 2018 Basis Technology Corp.
 */
package org.experiments.asynclazynodes;

import java.awt.BorderLayout;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.ListView;
import org.openide.explorer.view.OutlineView;
import org.openide.explorer.view.TableView;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Editor mode top component with an OutlineView to provide a tabular display of
 * some nodes.
 */
@ConvertAsProperties(
        dtd = "-//org.experiments.asynclazynodes//TableView//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TableViewTopComponent",
        iconBase = "org/experiments/asynclazynodes/renzix.gif",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.experiments.asynclazynodes.TableViewTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TableViewAction",
        preferredID = "TableViewTopComponent"
)
@Messages({
    "CTL_TableViewAction=TableView",
    "CTL_TableViewTopComponent=TableView Window",
    "HINT_TableViewTopComponent=This is a TableView window"
})
public final class TableViewTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static final long serialVersionUID = 1L;
    private final ExplorerManager explorerManager;

    public TableViewTopComponent() {
        this.explorerManager = new ExplorerManager();
        initComponents();
        setName(Bundle.CTL_TableViewTopComponent());
        setToolTipText(Bundle.HINT_TableViewTopComponent());
        setLayout(new BorderLayout());
        OutlineView outlineView = new OutlineView();
        outlineView.getOutline().setRootVisible(false);
        add(outlineView, BorderLayout.CENTER);        
        associateLookup(ExplorerUtils.createLookup(this.explorerManager, getActionMap())); 
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.explorerManager;
    }
    
    public void setRootNode(Node rootNode) {
        this.explorerManager.setRootContext(rootNode);
    }
    
    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
